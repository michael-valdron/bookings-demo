// Michael Valdron, Copyright 2022
//
// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Hello World
	// (GET /)
	ServeRoot(c *gin.Context)
	// Returns all students
	// (GET /api/students)
	ServeStudents(c *gin.Context)
	// Returns a student by ID
	// (GET /api/students/{id})
	ServeStudentById(c *gin.Context, id StudentId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ServeRoot operation middleware
func (siw *ServerInterfaceWrapper) ServeRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeRoot(c)
}

// ServeStudents operation middleware
func (siw *ServerInterfaceWrapper) ServeStudents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeStudents(c)
}

// ServeStudentById operation middleware
func (siw *ServerInterfaceWrapper) ServeStudentById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id StudentId

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeStudentById(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/", wrapper.ServeRoot)

	router.GET(options.BaseURL+"/api/students", wrapper.ServeStudents)

	router.GET(options.BaseURL+"/api/students/:id", wrapper.ServeStudentById)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RTTW/bMAz9KwK3o1Fn3daDbi06YMGGDUgw7FD0oFi0o9b6KKUECwL/94GK7X4kazIM",
	"uySyRD7y8T1uofI2eIcuRZBbiNUSrcpHizGqBmcYg3cR+SqQD0jJYA5AIk980BgrMiEZ70DCpRP5RfQA",
	"YtH66h4KSJuAICEmMq6BrhgqHIAQ4/caB5x9hK4AwoeVIdQgb0a42zHQL+6wSlwqppVGlw6QsMq0fHhL",
	"WIOEN+XjQMp+GmWf/YljL7UmjJFBjT4xcao53Cl7gOs3ZVH4WgwdFmDVr6/omrQEef7x4hhro6GHLnoy",
	"r/B/xmCvlfkuSOxgjjYyok71n7F+OPOwQmH4w9QGCQqoPVmVQIJx6eLDo67GJWyQoGOOxtWeYZNJLT9e",
	"eX9vXBOhgDVS3FWZnL07m3AnPqBTwYCE9/mqgKDSMnMs+afBrD0rr7hDbhnmSGucec9Dp97mOeV8MuG/",
	"yrvUm0aF0Joqp5Z3kWsPu3LMAi/XKJN7PqvvX7KqcWWtog1I+Ixt68VPT63OL6UKZvBSfJ3OfIj6R0om",
	"oY0n2psF6CVURGpzEscZphW5KFTbipHaHtlya3R3EuOrzVRn2UlZTEgR5M1LU06vn2yaSF7UmKolsNlA",
	"ZscMuyR3e3WaxE+2vLv9j1Yax/034x3pLjZies253e8AAAD//0XrGrL1BQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
